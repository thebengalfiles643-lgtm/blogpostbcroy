// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String      @unique
  content     String
  excerpt     String?
  coverImage  String?
  published   Boolean     @default(false)
  featured    Boolean     @default(false)
  readingTime Int?
  viewCount   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?
  
  authorId    String      @db.ObjectId
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  categoryIds String[]    @db.ObjectId
  categories  Category[]  @relation(fields: [categoryIds], references: [id])
  
  tagIds      String[]    @db.ObjectId
  tags        Tag[]       @relation(fields: [tagIds], references: [id])
  
  comments    Comment[]
  
  @@index([published, createdAt])
  @@index([slug])
  @@index([featured])
}

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  slug        String @unique
  description String?
  color       String @default("#3B82F6")
  createdAt   DateTime @default(now())
  
  postIds     String[] @db.ObjectId
  posts       Post[]   @relation(fields: [postIds], references: [id])
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  slug      String   @unique
  color     String   @default("#6B7280")
  createdAt DateTime @default(now())
  
  postIds   String[] @db.ObjectId
  posts     Post[]   @relation(fields: [postIds], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  parentId  String?  @db.ObjectId
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentReplies")
  
  @@index([postId, approved])
}

model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  subscribed Boolean  @default(true)
  createdAt DateTime @default(now())
}

model ContactMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  EDITOR
}